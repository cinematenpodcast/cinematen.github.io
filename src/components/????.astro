---
import BaseHead from "../../components/BaseHead.astro";
import BaseHeader from "../../components/BaseHeader.astro";
import BaseScript from "../../components/BaseScript.astro";
import BaseFooter from "../../components/BaseFooter.astro";
import BaseNavmenu from "../../components/BaseNavmenu.astro";
import BasePodcastBanner from "../../components/BasePodcastBanner.astro";
import BaseNieuwsItem from "../../components/BaseNieuwsItem.astro";

export async function getStaticPaths() {
  let allPosts = await Astro.glob('../nieuws/*.md');
  let tagCounts = {};

  allPosts.forEach((post) => {
    post.frontmatter.tags.forEach((tag) => {
      const formattedTag = tag.toLowerCase().replace(/:/g, '');
      if (!tagCounts[formattedTag]) tagCounts[formattedTag] = 0;
      tagCounts[formattedTag] += 1;
    });
  });

  let paths = [];
  for (let tag in tagCounts) {
    let postsWithTag = allPosts.filter((post) => {
      return post.frontmatter.tags.map(tag => tag.toLowerCase().replace(/:/g, '')).includes(tag);
    });

    let paginatedResults = paginate(postsWithTag, {
      params: { tag },
      pageSize: 10
    });

    paths.push(...paginatedResults);
  }

  return paths;
}

export async function getStaticProps({ params }) {
  const { tag, page } = params;
  const currentPage = parseInt(page || 1);

  let allPosts = await Astro.glob('../*.md');
  let filteredPosts = allPosts.filter((post) => post.frontmatter.title && post.frontmatter.tags.includes(tag));

  const totalPosts = filteredPosts.length;
  const pageSize = 10;
  const totalPages = Math.ceil(totalPosts / pageSize);
  const startIndex = (currentPage - 1) * pageSize;
  const endIndex = Math.min(startIndex + pageSize - 1, totalPosts - 1);
  const paginatedPosts = filteredPosts.slice(startIndex, endIndex + 1);

  return {
    props: {
      tag,
      currentPage,
      totalPages,
      paginatedPosts
    }
  };
}

const { currentPage, totalPages, paginatedPosts } = Astro.props;
const { tag } = Astro.params;

---

<html lang="nl">
    <head>
        <BaseHead/>
    </head>
    <body class="body">
        <div class="page-wrapper">
            <BaseNavmenu />
            <BaseHeader />
            <div class="content">
                <div class="container">
                    <h1 class="nieuws-title">Film & TV nieuws</h1>
                    <div class="w-layout-grid nieuws-list">
                        <div class="categories-block">
                            <div class="title-large">CategorieÃ«n</div>
                            <div class="categories-wrapper list">
                                <a href="../tags/film" class="categories-pill w-inline-block"><div class="title-small pink">Film</div></a>
                                <a href="../tags/tv" class="categories-pill w-inline-block"><div class="title-small pink">TV</div></a>
                                <a href="../tags/comics" class="categories-pill w-inline-block"><div class="title-small pink">Comics</div></a>
                                <a href="../tags/trailer" class="categories-pill w-inline-block"><div class="title-small pink">Trailer</div></a>
                                <a href="../tags/casting" class="categories-pill w-inline-block"><div class="title-small pink">Casting</div></a>
                            </div>
                        </div>
                        {paginatedPosts.map(post => (
                            <BaseNieuwsItem
                                key={post.url}
                                url={post.url}
                                title={post.frontmatter.title}
                                thumbnail={post.frontmatter.thumbnail}
                                date={post.frontmatter.date}
                                content={post.rawContent}
                            />
                        ))}
                        
                        <div class="pagination-wrapper">
                            <div class="pagination">
                                {currentPage > 1 ? <a href={`/${tag}/${currentPage - 1}`} class="previous-button w-inline-block"><div class="title-medium">Vorige</div></a> : null}
                                {currentPage > 2 ? <a href={`/${tag}/1`} class="previous-button w-inline-block"><div class="title-medium">Eerste</div></a> : null}
                                {Array.from({ length: totalPages }, (_, i) => {
                                    const pageNumber = i + 1;
                                    return (
                                        <a href={`/${tag}/${pageNumber}`} key={pageNumber}>{pageNumber}</a>
                                    );
                                })}
                                {currentPage < totalPages ? <a href={`/${tag}/${currentPage + 1}`} class="next-button w-inline-block"><div class="title-medium">Volgende</div></a> : null}
                                {currentPage < totalPages - 1 ? <a href={`/${tag}/${totalPages}`} class="next-button w-inline-block"><div class="title-medium">Laatste</div></a> : null}
                            </div>
                        </div>
                    </div>
                </div>
                <BasePodcastBanner />
            </div>
            <BaseFooter />
        </div>
        <BaseScript />
    </body>
</html>
