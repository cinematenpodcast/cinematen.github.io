---
// Import necessary components
import BaseHead from "../../../../components/BaseHead.astro";
import BaseHeader from "../../../../components/BaseHeader.astro";
import BaseScript from "../../../../components/BaseScript.astro";
import BaseFooter from "../../../../components/BaseFooter.astro";
import NewNavmenu from "../../../../components/NewNavmenu.astro";
import BasePodcastBanner from "../../../../components/BasePodcastBanner.astro";
import BaseNieuwsItem from "../../../../components/BaseNieuwsItem.astro";
import BaseHeadExclude from "../../../../components/BaseHeadExclude.astro";

export async function getStaticPaths({ paginate }) {
    const allPosts = await Astro.glob('../../*.md');
    
    // Get all unique tags and their posts
    const tagMap = new Map();
    
    allPosts.forEach((post) => {
        console.log('Post object:', Object.keys(post));
        if (post.frontmatter.title && post.frontmatter.tags) {
            post.frontmatter.tags.forEach((tag) => {
                const formattedTag = tag.toLowerCase().replace(/:/g, '');
                if (!tagMap.has(formattedTag)) {
                    tagMap.set(formattedTag, []);
                }
                tagMap.get(formattedTag).push(post);
            });
        }
    });

    // Create paginated routes for each tag
    const routes = [];
    for (const [tag, posts] of tagMap.entries()) {
        const sortedPosts = posts.sort((a, b) => 
            new Date(b.frontmatter.date) - new Date(a.frontmatter.date)
        );
        
        const paginatedPages = paginate(sortedPosts, {
            params: { tag, page: 1 },
            props: { tag },
            pageSize: 8
        });
        
        routes.push(...paginatedPages);
    }
    
    return routes;
}

const { page, tag } = Astro.props;
const totalPages = page.lastPage;
const currentPage = page.currentPage;
const pageNumbersToShow = 5;

function generatePageNumbers(currentPage, totalPages, pageNumbersToShow) {
    const halfWindow = Math.floor(pageNumbersToShow / 2);
    let start = Math.max(1, currentPage - halfWindow);
    let end = Math.min(totalPages, currentPage + halfWindow);

    if (currentPage - halfWindow < 1) {
        end = Math.min(end + (halfWindow - currentPage + 1), totalPages);
    }
    if (currentPage + halfWindow > totalPages) {
        start = Math.max(1, start - (currentPage + halfWindow - totalPages));
    }

    return {start, end};
}

const {start, end} = generatePageNumbers(currentPage, totalPages, pageNumbersToShow);

exclude_from_search: true
---

<html lang="nl">
    <head>
        <BaseHeadExclude />
    </head>
    <body class="body">
        <div class="page-wrapper">
            <NewNavmenu />
            <BaseHeader />
            <div class="content">
                <div class="container">
                    <h1 class="nieuws-title">Film & TV nieuws - {tag}</h1>
                    <div class="w-layout-grid nieuws-list">
                        <div class="categories-block">
                            <div class="title-large">CategorieÃ«n</div>
                            <div class="categories-wrapper list">
                                <a href="/nieuws/tags/film/1" class="categories-pill w-inline-block"><div class="title-small pink">Film</div></a>
                                <a href="/nieuws/tags/tv/1" class="categories-pill w-inline-block"><div class="title-small pink">TV</div></a>
                                <a href="/nieuws/tags/comics/1" class="categories-pill w-inline-block"><div class="title-small pink">Comics</div></a>
                                <a href="/nieuws/tags/trailer/1" class="categories-pill w-inline-block"><div class="title-small pink">Trailer</div></a>
                                <a href="/nieuws/tags/casting/1" class="categories-pill w-inline-block"><div class="title-small pink">Casting</div></a>
                            </div>
                        </div>
                        {page.data.map(post => (
                            <BaseNieuwsItem
                                key={post.url}
                                url={post.url}
                                title={post.frontmatter.title}
                                thumbnail={post.frontmatter.thumbnail}
                                date={post.frontmatter.date}
                                content={post.rawContent()}
                            />
                        ))}
                        <div class="pagination-wrapper">
                            <div class="pagination">
                                {page.url.prev ? <a href={page.url.prev} class="previous-button w-inline-block"><div class="title-medium">Vorige</div></a> : null}
                                {start > 1 ? <span>... </span> : null}
                                {Array.from({ length: end - start + 1 }, (_, i) => i + start).map(number =>
                                    number === currentPage ? (
                                        <strong class="page-indicator" key={number}>{number}</strong>
                                    ) : (
                                        <a href={`/nieuws/tags/${tag}/${number}`} key={number}>{number}</a>
                                    )
                                )}
                                {end < totalPages ? <span> ...</span> : null}
                                {page.url.next ? <a href={page.url.next} class="next-button w-inline-block"><div class="title-medium">Volgende</div></a> : null}
                            </div>
                        </div>
                    </div>
                </div>
            <BasePodcastBanner />
        </div>
        <BaseFooter />
    </body>
    <BaseScript />
</html> 