---
// Import necessary components
import BaseHead from "../../../components/BaseHead.astro";
import BaseHeader from "../../../components/BaseHeader.astro";
import BaseScript from "../../../components/BaseScript.astro";
import BaseFooter from "../../../components/BaseFooter.astro";
import BaseNavmenu from "../../../components/BaseNavmenu.astro";
import BasePodcastBanner from "../../../components/BasePodcastBanner.astro";
import BaseNieuwsItem from "../../../components/BaseNieuwsItem.astro";

export async function getStaticPaths () {
  // grab all .md files from a folder
  let allPosts = await Astro.glob('../*.md');
  // I need this filter to ignore files that do not have 
  // a title, or no published date (in frontmatter)
  // this way I leave the date out while the post is not finished.
  let dix = {};
  allPosts.forEach((post) => {
    // go thru each tag in each published post,
    // fill in the object...
    post.frontmatter.tags.forEach((tag) => {
      // Convert tag to lowercase and remove extra characters
      const formattedTag = tag.toLowerCase().replace(/:/g, '');
      if (!dix[formattedTag]) dix[formattedTag] = 0;
      dix[formattedTag] += 1;
    });
  });
  console.log('dix', dix); // <-- prints out our tag-cloud data.

  let ary = [];
  // format the data to return from getStaticPaths()
  for (let prop in dix) {
    ary.push({
      params: { tag: prop },
      props: { tagname: prop, count: dix[prop] }
    });
  }
  return ary;
}

// grab the selected tag from the url (dynamic [tag])
const tagname = Astro.params.tag.toLowerCase(); // Convert tagname to lowercase
const tagcount = Astro.props.count;

// These section feels duplicated from getStaticPaths()
// opportunity to refactor...
let allPosts = await Astro.glob('../*.md');
let filteredPosts = 
    allPosts.filter((p) => { 
      return p.frontmatter.title;
    });
// now filter to only posts containing the selected tag,
// these will be rendered below in the markup.
let tagged = filteredPosts.filter((p) => { 
  return p.frontmatter.tags.map(tag => tag.toLowerCase().replace(/:/g, '')).includes(tagname); 
});

// Grab the titles of the five newest articles for debugging
const newestArticles = filteredPosts
  .sort((a, b) => new Date(b.frontmatter.date) - new Date(a.frontmatter.date)) // Sort by date, descending
  .slice(0, 8) // Get the first 5 articles
  .map(post => post.frontmatter.title); // Map to titles

console.log('Titles of the five newest articles:', newestArticles);
---

<html lang="nl">
    <head>
        <BaseHead/>
        <meta name="pagefind-noindex" content="true" />
    </head>
    <body class="body">
        <div class="page-wrapper">
            <BaseNavmenu />
            <BaseHeader />
            <div class="content">
                <div class="container">
                    <h1 class="nieuws-title">Film & TV nieuws</h1>
                    <div class="w-layout-grid nieuws-list">
                        <div class="categories-block">
                            <div class="title-large">CategorieÃ«n</div>
                            <div class="categories-wrapper list">
                                <a href="/nieuws/tags/film" class="categories-pill w-inline-block"><div class="title-small pink">Film</div></a>
                                <a href="/nieuws/tags/tv" class="categories-pill w-inline-block"><div class="title-small pink">TV</div></a>
                                <a href="/nieuws/tags/comics" class="categories-pill w-inline-block"><div class="title-small pink">Comics</div></a>
                                <a href="/nieuws/tags/trailer" class="categories-pill w-inline-block"><div class="title-small pink">Trailer</div></a>
                                <a href="/nieuws/tags/casting" class="categories-pill w-inline-block"><div class="title-small pink">Casting</div></a>
                            </div>
                        </div>
                        {tagged
                            .sort((a, b) => new Date(b.frontmatter.date) - new Date(a.frontmatter.date))
                            .map(post => (
                                <BaseNieuwsItem
                                    key={post.url}
                                    url={post.url}
                                    title={post.frontmatter.title}
                                    thumbnail={post.frontmatter.thumbnail}
                                    date={post.frontmatter.date}
                                    content={post.rawContent}
                                />
                            ))}
                        
                        
                        <!--div class="pagination-wrapper">
                            <div class="pagination">
                                {page.url.prev ? <a href={page.url.prev} class="previous-button w-inline-block"><div class="title-medium">Vorige</div></a> : null}
                                {start > 1 ? <span>... </span> : null}
                                {Array.from({ length: end - start + 1 }, (_, i) => i + start).map(number =>
                                    number === currentPage ? (
                                        <strong class="page-indicator" key={number}>{number}</strong>
                                    ) : (
                                        <a href={`/${number}`} key={number}>{number}</a>
                                    )
                                )}
                                {end < totalPages ? <span> ...</span> : null}
                                {page.url.next ? <a href={page.url.next} class="next-button w-inline-block"><div class="title-medium">Volgende</div></a> : null}
                            </div>
                        </div !-->
                    </div>
                </div>
            <BasePodcastBanner />
        </div>
        <BaseFooter />
    </body>
    <BaseScript />
</html>
